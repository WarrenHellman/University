Warren H Intro to Python Week 2 HW

#odd or even. prints whether a number is odd or even

def oddEven(start,finish):
    while start<=finish:
        if start%2==0:
            print "Number is",start,". This is an even number."
        else:
            print "Number is", start,". This is an odd number."
        start = start +1

oddEven(1,200)

#Coding Academy Multiples challenge: multiplies list values by 5

a = [2,4,10,16]

def multiply(list):
    count = 0
    while count<len(list):
        list[count]= list[count]*5
        count=count+1
    print list

multiply(a)

#Code Academy Dictionary Printer- create a function that prints keys and values together
def printer(list):
    for keys in myDictionary:
        print '"'+keys+":"+str(myDictionary[keys])+'"'

printer(myDictionary)


#Code AcademyCoin Toss (optional). Can also make into a function with attempt parameters using a while statement

print "Starting the program..."
hCount=0
tCount=0
for j in range (1,201): 
    import random
    result = random.randint(0,1)
    if result ==0:
        outcome = "head"
        hCount= hCount+1
    else:
        outcome = "tail"
        tCount=tCount+1
    print "Attempt #"+str(j)+": Throwing a coin... It's a "+outcome+"! ... Got "+str(hCount)+"heads(s) so far and "+str(tCount)+" tail(s) so far"
print "Ending the program, thank you!"  

#Math Dojo, create a add function and a subtract function

from mathDojo import add,subtract

def add(list):
    i=0
    sum=0
    while i<len(list):
        sum=sum+list[i]
        i=i+1
    print sum

add([2,3,4,5])

def subtract(a,b):
    i=0
    j=0
    sumA=0
    sumB=0
    if isinstance(a,list)==True:
        while i<len(a):
            sumA=sumA+a[i]
            i=i+1
    else: 
        sumA=a
    if isinstance(b,list)==True:
        while j<len(b):
            sumB=sumB+b[j]
            j=j+1
    else:
        sumB=b
    print sumA-sumB

mathDojo.add(2,5)
mathDojo.subtract([2,5],5)


#Turtle 

import turtle


#Beginner Square
DIST = 100
turtle.forward(DIST)
turtle.right(144)
turtle.forward(DIST)
turtle.right(144)
turtle.forward(DIST)
turtle.right(144)
turtle.forward(DIST)
turtle.right(144)
turtle.forward(DIST)
turtle.right(144)
turtle.done()


#beginner pentagon
DIST = 100
turtle.forward(DIST)
turtle.right(72)
turtle.forward(DIST)
turtle.right(72)
turtle.forward(DIST)
turtle.right(72)
turtle.forward(DIST)
turtle.right(72)
turtle.forward(DIST)
turtle.right(72)
turtle.done()

#intermediate star pattern
DIST = 100
turtle.forward(DIST)
turtle.right(144)
turtle.forward(DIST)
turtle.right(144)
turtle.forward(DIST)
turtle.right(144)
turtle.forward(DIST)
turtle.right(144)
turtle.forward(DIST)
turtle.right(144)
turtle.done()


#advanced shape

turtle.left(108)
turtle.forward(100)
turtle.left(72)
turtle.forward(100)
turtle.left(72)
turtle.forward(100)
turtle.left(72)
turtle.forward(100)
turtle.left(72)
turtle.forward(100)
turtle.right(35)
turtle.forward(100)
turtle.left(72)
turtle.forward(100)
turtle.left(72)
turtle.forward(100)
turtle.left(72)
turtle.forward(100)
turtle.done()